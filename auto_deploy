#!/bin/bash
declare -r intro_info="This is an Automated program to deploy MariaDB and Maxscale Instances using Ansible"
declare -r wlc_text="||*************Launching Configuration*************||"
declare -a details_arr
declare -A full_details
declare -i inst_nos
declare edition
#declare array to hold instance details: 
declare -r custom_host_file="custom_deployment_hosts"
declare inv_group_name="dbservers"
declare error_text="\033[0;31m"
declare success_text='\033[0;32m'
declare info_text='\033[0;33m'
declare clear_txtcolor='\033[0m'
echo
echo "====================================================="
echo $wlc_text
echo "====================================================="
#echo -e 'Starting Configuration. \xc2\xa9 2022'
printf "Starting Configuration: %(%Y-%m-%d %H:%M:%S)T\n" $(date +%s)
echo "**********************************************************"
echo $intro_info 
echo

#echo -e "Makes a DingSound\a"
printTableformat(){
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    	then 
	    local -r numberOfLines="$(wc -l <<< "${data}")"
            if [[ "${numberOfLines}" -gt '0' ]]
	    then
		local table=''
		local i=1

		for ((i=1; i <= "${numberOfLines}"; i++))
		do
		  local line=''
                  line="$(sed "${i}q;d" <<< "${data}")"

		  local numberOfColumns='0'
		  numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"
		  
		  #Add Line Delimiter
		  if [[ "${i}" -eq '1' ]]; then
		      table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
		  fi
		  #Add Header or Body
		  table="${table}\n"
		  local j=1
		  for((j = 1; j <= "${numberOfColumns}"; j = j+1 ))
		  do
                     table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
		  done
                  table="${table}#|\n"
	          #Add line Delimiter
		  if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
		  then
			table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
		  fi
		done
                if [[ "$(isEmptyString "${table}")" = 'false' ]]
 		then
       		    echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ","-", $0)}1'
                fi
            fi
    fi
}

function removeEmptyLines(){
   local -r  content="${1}"

   echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString(){
  local -r string="${1}"
  local -r numberToRepeat="${2}"
  
  if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
  then
      local -r result="$(printf "%${numberToRepeat}s")"
      echo -e "${result// /${string}}"
  fi
}

function isEmptyString(){
   local -r string="${1}"
   if [[ "$(trimString "${string}")" = '' ]]
   then
       echo 'true' && return 0
   fi

   echo 'false' && return 1
}

function trimString(){
  local -r string="${1}"
  sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

touch server_details
cat > server_details <<-EOF
S/N,ALIAS,HOST,SSH_USER,SSH_PASSWORD
EOF
touch $custom_host_file
#write custom host deployment
cat > $custom_host_file <<-EOF
[$inv_group_name]
EOF

read_connect_file(){
count=0
echo -e "${info_text}*Ensure connect.config file is in the right format...*${clear_txtcolor}"
#prepare local inventory file
sed -i '1,3!d' custom_deployment_hosts
#get username from connect.config file
while read -p "enter file name (full_path): " connect_file; do
  if [[ ! -z $connect_file ]];then
    break
  fi
   echo -e "${error_text}file name cannot be empty.${clear_txtcolor}"
done
user=$(fgrep User $connect_file 2>/dev/null| grep -v "^#" | sed -e "s/Username//g" | tr -d " \t" | head -1)
#get and set hosts from connect.config
IFS="
"
 for srv in $(fgrep -B1 Hostname $connect_file | grep -v "^#" | tr -d "\n" | sed -e "s/--/\n/g" | tr -s " " "\t")
  do
    	IFS=$(echo -e "\t") a=($srv)
        name=${a[1]}
        addr=${a[3]}
        count=$((count+1))
    echo "$name ansible_ssh_host=$addr ansible_connection=ssh ansible_user=$user" >> custom_deployment_hosts
redacted_pwd="using ssh key"
cat >> server_details <<-EOF
$count,$name,$addr,$user,$redacted_pwd
EOF

done
   IFS="
"
  #go to next program - print server details and confirm.
  echo
   printTableformat ',' "$(cat server_details)"
   echo
    while [[ -z $conf_pr ]]
   do
   read -p "Proceed with deploying to the above servers[Y/N]: "  conf_pr
   if [[ $conf_pr = "y" || $conf_pr = "yes" ]]; then
        echo "Launching Auto Deploy."; start_deployment_maxscale
   elif [[ $conf_pr = "n" || $conf_pr = "no" ]]; then
   echo "Terminating Program... Bye..."
   fi
  done

}

begin_install(){
  echo "Starting task..."
  default_version="latest"
  read -ep "Enter Mariadb version(e.g. 10.4) [$default_version]: " mariadb_version
  selected_version=${mariadb_version-$default_version}

  echo "Choose MariaDB distribution to install: "
  select edition in  "Enterprise" "Community" "quit"
do
  	case $edition in 
                Enterprise) echo "Selected edition: Enterprise"; edition="Enterprise";;
                Community) echo "Selected edition: Community"; edition="Community";;
                quit) echo "Terminating Program... Bye..."; exit 1;;
                *) echo "Invalid option"; break;;
        esac
	break
done

  if [[ $edition == "Enterprise" ]]; then
      while read -p "Enter download Token:" cust_key; do
      if [[ ! -z $cust_key ]]; then
        break
      fi
      echo -e "${error_text}Download Token cannot be empty. Please enter a token\a${clear_txtcolor}"
      done

  fi
    read -p "Read Server(s) details from connect file? (y)es/(n)o: " read_from_connect
    if [[ $read_from_connect = "y" || $read_from_connect = "yes" ]]; then
          read_connect_file
   elif [[ $read_from_connect = "n" || $read_from_connect = "no" ]]; then

  read -p "Enter Number of Nodes:" no_instances
if [[ $no_instances -gt 0 ]]; then 
   #echo $?
   #call next program
   for ((i=1; i<=$no_instances; i++))
   do
	echo
	echo "configure instance: $i"
	#instance_details[alias]
        unset inst_no 
        inst_no=$i
	read -p "alias($i): " alias
	read -p "host($i):  " host
	read -p "ssh_user:  " ssh_user
        read -p "Use ssh_trust connection - assumes key is in place. [y/n]: "  ssh_trust_set
        if [[ $ssh_trust_set = "y" || $ssh_trust_set = "yes" ]]; then
        declare redacted_pwd="using ssh Key"
        elif [[ $ssh_trust_set = "n" || $ssh_trust_set = "no" ]]; then
	unset ssh_password
        unset charcount
	charcount=0
	prompt="ssh_password: "
	while IFS= read -s -r -n 1 -p "$prompt" ssh_pwd
	do
		#take and mask password with * characters
		if [[ $ssh_pwd == $'\0' ]]
		then
		   break
		fi
		#handle Backspaces
		if [[ $ssh_pwd == $'\177' ]]; then
		    if [[ $charcount -gt 0 ]]; then
                        charcount=$((charcount-1))
       			prompt=$'\b \b'
		        ssh_password="${ssh_password%?}"
                    else
			prompt=''
                    fi
		else
		    charcount=$((charcount+1))
	            prompt='*'
		    ssh_password+="$ssh_pwd"
		fi
declare redacted_pwd=${ssh_password//[a-z0-9]/x}
done
fi
cat >> server_details <<-EOF
$inst_no,$alias,$host,$ssh_user,$redacted_pwd
EOF
#write custom host deployment
if [[ -z $ssh_password ]]; then
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user
EOF
else
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user ansible_password=$ssh_password
EOF
fi
   done
echo
   printTableformat ',' "$(cat server_details)"
   echo
    while [[ -z $conf_pr ]]
   do
   read -p "Proceed with deploying to the above servers[Y/N]: "  conf_pr
   if [[ $conf_pr = "y" || $conf_pr = "yes" ]]; then
   	echo "Launching Auto Deploy."; launchAnsible false $edition
   elif [[ $conf_pr = "n" || $conf_pr = "no" ]]; then
   echo "Terminating Program... Bye..."
   exit 1
   fi
  done
fi
else
   echo "[Error] : Please enter a Number greater than 0"
fi
}

setup_maxscale(){
        unset inv_group_name
	 inv_group_name="maxscale"
cat > $custom_host_file <<-EOF
[$inv_group_name]
EOF
    echo "Starting task..."
  default_version="latest"
  read -ep "Enter Maxscale version(e.g. 2.5) [$default_version]: " maxscale_version
  selected_version=${mariadb_version-$default_version}
      while read -p "Enter download Token:" cust_key; do
      if [[ ! -z $cust_key ]]; then
        break
      fi
      echo -e "${error_text}Download Token cannot be empty. Please enter a token\a${clear_txtcolor}"
      done

 read -p "Read Server(s) details from connect file? (y)es/(n)o: " read_from_connect
    if [[ $read_from_connect = "y" || $read_from_connect = "yes" ]]; then
          read_connect_file
   elif [[ $read_from_connect = "n" || $read_from_connect = "no" ]]; then
  read -p "Enter Number of Nodes:" no_instances
if [[ $no_instances -gt 0 ]]; then 
   #echo $?
   #call next program
   for ((i=1; i<=$no_instances; i++))
   do
	echo
	echo "configure instance: $i"
	#instance_details[alias]
        unset inst_no 
        inst_no=$i
	read -p "alias($i): " alias
	read -p "host($i):  " host
	read -p "ssh_user:  " ssh_user
        read -p "Use ssh_trust connection - assumes key is in place. [y/n]: "  ssh_trust_set
        if [[ $ssh_trust_set = "y" || $ssh_trust_set = "yes" ]]; then
        declare redacted_pwd="using ssh Key"
        elif [[ $ssh_trust_set = "n" || $ssh_trust_set = "no" ]]; then
	unset ssh_password
        unset charcount
	charcount=0
	prompt="ssh_password: "
	while IFS= read -s -r -n 1 -p "$prompt" ssh_pwd
	do
		#take and mask password with * characters
		if [[ $ssh_pwd == $'\0' ]]
		then
		   break
		fi
		#handle Backspaces
		if [[ $ssh_pwd == $'\177' ]]; then
		    if [[ $charcount -gt 0 ]]; then
                        charcount=$((charcount-1))
       			prompt=$'\b \b'
		        ssh_password="${ssh_password%?}"
                    else
			prompt=''
                    fi
		else
		    charcount=$((charcount+1))
	            prompt='*'
		    ssh_password+="$ssh_pwd"
		fi
declare redacted_pwd=${ssh_password//[a-z0-9]/x}
done
fi
cat >> server_details <<-EOF
$inst_no,$alias,$host,$ssh_user,$redacted_pwd
EOF
#write custom host deployment
if [[ -z $ssh_password ]]; then
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user
EOF
else
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user ansible_password=$ssh_password
EOF
fi
   done

echo
   printTableformat ',' "$(cat server_details)"
   echo
    while [[ -z $conf_pr ]]
   do
   read -p "Proceed with deploying to the above servers[Y/N]: "  conf_pr
   if [[ $conf_pr = "y" || $conf_pr = "yes" ]]; then
   	echo "Launching Auto Deploy."; start_deployment_maxscale
   elif [[ $conf_pr = "n" || $conf_pr = "no" ]]; then
   echo "Terminating Program... Bye..."
   fi
  done
fi
else
   echo "[Error] : Please enter a Number greater than 0"
fi
}

standalone_install(){
  echo "Starting task..."
  default_version="latest"
  read -ep "Enter Mariadb version(e.g. 10.4) [$default_version]: " mariadb_version
  selected_version=${mariadb_version-$default_version}

  echo "Choose MariaDB distribution to install: "
  select edition in  "Enterprise" "Community" "quit"
do
  	case $edition in 
                Enterprise) echo "Selected edition: Enterprise"; edition="Enterprise";;
                Community) echo "Selected edition: Community"; edition="Community";;
                quit) echo "Terminating Program... Bye..."; exit 1;;
                *) echo "Invalid option"; break;;
        esac
	break
done
  if [[ $edition == "Enterprise" ]]; then
      while read -p "Enter download Token:" cust_key; do
      if [[ ! -z $cust_key ]]; then
        break
      fi
      echo -e "${error_text}Download Token cannot be empty. Please enter a token\a${clear_txtcolor}"
      done

  fi
 read -p "Read Server(s) details from connect file? (y)es/(n)o: " read_from_connect
    if [[ $read_from_connect = "y" || $read_from_connect = "yes" ]]; then
          read_connect_file
   elif [[ $read_from_connect = "n" || $read_from_connect = "no" ]]; then
  read -p "Enter Number of Nodes:" no_instances
if [[ $no_instances -gt 0 ]]; then 
   #echo $?
   #call next program
   for ((i=1; i<=$no_instances; i++))
   do
	echo
	echo "configure instance: $i"
	#instance_details[alias]
        unset inst_no 
        inst_no=$i
	read -p "alias($i): " alias
	read -p "host($i):  " host
	read -p "ssh_user:  " ssh_user
        read -p "Use ssh_trust connection - assumes key is in place. [y/n]: "  ssh_trust_set
        if [[ $ssh_trust_set = "y" || $ssh_trust_set = "yes" ]]; then
        declare redacted_pwd="using ssh Key"
        elif [[ $ssh_trust_set = "n" || $ssh_trust_set = "no" ]]; then
	unset ssh_password
        unset charcount
	charcount=0
	prompt="ssh_password: "
	while IFS= read -s -r -n 1 -p "$prompt" ssh_pwd
	do
		#take and mask password with * characters
		if [[ $ssh_pwd == $'\0' ]]
		then
		   break
		fi
		#handle Backspaces
		if [[ $ssh_pwd == $'\177' ]]; then
		    if [[ $charcount -gt 0 ]]; then
                        charcount=$((charcount-1))
       			prompt=$'\b \b'
		        ssh_password="${ssh_password%?}"
                    else
			prompt=''
                    fi
		else
		    charcount=$((charcount+1))
	            prompt='*'
		    ssh_password+="$ssh_pwd"
		fi
declare redacted_pwd=${ssh_password//[a-z0-9]/x}
done
fi
cat >> server_details <<-EOF
$inst_no,$alias,$host,$ssh_user,$redacted_pwd
EOF
#write custom host deployment
if [[ -z $ssh_password ]]; then
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user
EOF
else
cat >> $custom_host_file <<-EOF
$alias ansible_ssh_host=$host ansible_connection=ssh ansible_user=$ssh_user ansible_password=$ssh_password
EOF
fi
   done

echo
   printTableformat ',' "$(cat server_details)"
   echo
    while [[ -z $conf_pr ]]
   do
   read -p "Proceed with deploying to the above servers[Y/N]: "  conf_pr
   if [[ $conf_pr = "y" || $conf_pr = "yes" ]]; then
   	echo "Launching Auto Deploy."; launchAnsible true $edition
   elif [[ $conf_pr = "n" || $conf_pr = "no" ]]; then
   echo "Terminating Program... Bye..."
   fi
  done
fi
else
   echo "[Error] : Please enter a Number greater than 0"
fi
}

start_deployment(){
  echo "[NOTE]: [----------------------starting deployment----------------------]"
  echo "[NOTE]: Initial checks passed. Proceeding to deploy on configured nodes"
  echo "[NOTE]: Ensure configured hosts are properly captured in Playbook."
  echo "populating configuration files and template."
  echo -ne '##########          (30%)\r'
  sleep 1
  echo -ne '#######################         (60%)\r'
  sleep 1
  echo -ne '##########################################       (100%) [status: Complete. Proceeding] \r'
  echo -ne '\n'
  if [[ "$1" == "true" && "$2" == "Community" ]]; then
    ansible-playbook deploy_standalone.yml -i $custom_host_file --extra-vars "dbVersion=$selected_version"
    elif [[ "$1" == "true" && "$2" == "Enterprise" ]]; then
    ansible-playbook deploy_standalone_enterprise.yml -i $custom_host_file --extra-vars "dbVersion=$selected_version download_token=$cust_key"
  elif [[ "$1" == "false" && "$2" == "Enterprise" ]]; then
    ansible-playbook deploy_replication.yml -i $custom_host_file --extra-vars "dbVersion=$selected_version download_token=$cust_key"
  fi

}

start_deployment_maxscale(){
declare -a address_list
template_file=maxscale_cnf_template
echo "Select Maxscale Module: "
select module_type in  "mariadbmon" "galeramon" "quit"
do
  	case $module_type in 
                mariadbmon) echo "Selected module_type: mariadbmon"; echo $module_type ;;
                galeramon) echo "Selected module_type: galeramon"; echo $module_type ;;
                quit) echo "Terminating Program... Bye..."; exit 1;;
                *) echo "Invalid option";;
        esac
	break
done

read -p "Enter maxscale user:" maxscale_user
read -p "Enter maxscale password:" maxscale_pwd

read -p "Enter Number of Servers to monitor:" no_servers
if [[ $no_servers -gt 0 ]]; then 
   for ((i=1; i<=$no_servers; i++))
   do
         echo "configure server_$i"
        read -p "alias($i): " sAlias
        read -p "address($i): " sAddress
        read -p "port($i):  " sPort

 address_list+=($sAlias)
  #write entry to template file
cat >> $template_file <<-EOF

[$sAlias]
type=server
address=$sAddress
port=$sPort 
protocol=MariaDBBackend
EOF
done

  srv_list=$(for server in "${address_list[*]}"; do echo "$server"; done | awk '{ gsub (" ", ",", $0); print}')

cat >> $template_file <<-EOF

# Monitor for the servers
[MariaDB-Monitor]
type=monitor
module=mariadbmon
servers=$srv_list
user=$maxscale_user
password=$maxscale_pwd
monitor_interval=2s

# Service definitions
[Read-Only-Service]
type=service
router=readconnroute
servers=$srv_list
user=$maxscale_user
password=$maxscale_pwd
router_options=slave

[Read-Write-Service]
type=service
router=readwritesplit
servers=$srv_list
user=$maxscale_user
password=$maxscale_pwd

# Listener definitions for the services
#
[Read-Only-Listener]
type=listener
service=Read-Only-Service
protocol=MariaDBClient
port=4008

[Read-Write-Listener]
type=listener
service=Read-Write-Service
protocol=MariaDBClient
port=4006

EOF
fi

   echo "[NOTE]: [----------------------starting maxscale deployment----------------------]"
   echo "[NOTE]: Initial checks passed. Proceeding to deploy on configured nodes"
   echo "[NOTE]: Ensure configured hosts are properly captured in Playbook."
   ansible-playbook deploy_maxscale.yml -i $custom_host_file --extra-vars "mxsVersion=$maxscale_version download_token=$cust_key"

#cleanup
>$template_file
}

check_OS(){
printf "\033[0;33mDetecting Server Architectures\033[33;5m......\033[0m\n"
oscheck_status=$(sshpass -p $ssh_password ssh -o ConnectTimeout=5 $ssh_user@$host 'bash -s' < $(dirname "$0")/check_distro.sh)
ansible-playbook check_os.yml -i $custom_host_file
check_existingDB $1 $2
}

check_existingDB(){
echo -e "Checking DB"
ansible-playbook check_os.yml -i $custom_host_file
#sshpass -p $ssh_password ssh -o ConnectTimeout=5 $ssh_user@$host 'bash -s' < $(dirname "$0")/check_existing_db_service.sh
start_deployment $1 $2
}

launchAnsible(){
echo "$inst_nos"
#test ping on servers
echo "Initiating Ping check..."
ansible $inv_group_name -i $custom_host_file -m ping
ping_status=$(ansible $inv_group_name -i $custom_host_file -m ping)
check_string="SUCCESS"
#if [[ $ping_status =~ "check_string" ]]; then
# echo -e "\033[0;32mPing check status: successful[exit code: 0]\033[0m"
#else
#  echo -e "\033[0;33mPing check status: unsuccessful[exit code: 1]\033[0m"
#fi
echo "**************************************************************"
echo "Initiating SSH checks to target nodes..."
ssh_status=$(sshpass -p $ssh_password ssh -o ConnectTimeout=5 $ssh_user@$host echo ok 2>&1)
echo $ssh_status
if [[ $ssh_status == ok ]]; then
  echo -e "\033[0;32mssh check: passed\033[0m"; check_OS $1 $2
else
  echo -e "\033[0;31m[Error]: ssh check: failed. Reconfirm ssh credentials or configure ssh trust\033[0m".
  echo -e  "\033[0;33mTerminating program. Fix the reported error(s) and relaunch.\033[0m"
fi
}

echo "Select one of the tasks below to proceed: "
echo "-------------------------------------------------"

select task in  "MASTER-REPLICAS" "STANDALONE_INSTANCES" "MAXSCALE" "quit"
do
	case $task in 
		MASTER-REPLICAS) echo "Selected task: MASTER-REPLICAS"; begin_install;;
		STANDALONE_INSTANCES) echo "Selected task: SINGLE_INSTANCES"; standalone_install;;
		MAXSCALE) echo "Selected task: INSTALL & CONFIGURE MAXSCALE"; setup_maxscale;;
                quit) echo "Terminating Program... Bye..."; break;;
		*) echo "Invalid option";;
	esac
	break
done

